resources:
  - name: myImage
    type: Image
    configuration:
      registry: tr_docker
      imageName: trriplejay/simpleserver
      imageTag: latest

  - name: myBaseImage
    type: Image
    configuration:
      registry: johns_art
      sourceRepository: buildimages
      imageName: 35.238.69.200:8082/buildimages/w19base
      imageTag: latest
      autoPull: false

  - name: myRepo
    type: GitRepo
    configuration:
      path: trriplejay/jfrog_samples
      gitProvider: tr_github

  - name: go_app_repo
    type: GitRepo
    configuration:
      path: trriplejay/go_app
      gitProvider: tr_github


  - name: myBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: johns_art
      buildName: test
      buildNumber: 0

  - name: myFileSpec
    type: FileSpec
    configuration:
      sourceArtifactory: johns_art
      target: state_data
      pattern: "pipelines_1584860370/projects/*"
      recursive: true
      flat: false
      limit: 5
      offset: 2

  - name: myVmCluster
    type: VmCluster
    configuration:
      sshKey: johns_ssh
      targets:
        - 35.238.69.200
########## HOOKS basic auth
  - name: myIncomingHook
    type: IncomingWebhook
    configuration:
      webhookName: johns_wh_internal

  - name: myOutgoingHook
    type: OutgoingWebhook
    configuration:
      webhookName: johns_wh_external
      headers:
        Content-Type: "application/json"
        MySpecialHeader: "foobar"
        Pipeline-Name: "$pipeline_name"
      path: "/pipelines/api/v1/projectIntegrations/20/hook"
      parameters: "hello=world"
########### END HOOKS basic auth

############ HOOKS hmac
  - name: myIncomingHook_hmac
    type: IncomingWebhook
    configuration:
      webhookName: johns_wh_internal_hmac

  - name: myOutgoingHook_hmac
    type: OutgoingWebhook
    configuration:
      webhookName: johns_wh_external_hmac
      headers:
        Content-Type: "application/json"
        MySpecialHeader: "foobar"
        Pipeline-Name: "$pipeline_name"
      path: "/pipelines/api/v1/projectIntegrations/22/hook"
      parameters: "hello=world"
############ END HOOKS hmac

############ HOOKS auth
  - name: myIncomingHook_auth
    type: IncomingWebhook
    configuration:
      webhookName: johns_wh_internal_auth

  - name: myOutgoingHook_auth
    type: OutgoingWebhook
    configuration:
      webhookName: johns_wh_external_auth
      headers:
        Content-Type: "application/json"
        MySpecialHeader: "foobar"
        Pipeline-Name: "$pipeline_name"
      path: "/pipelines/api/v1/projectIntegrations/24/hook"
      parameters: "hello=world"
############ END HOOKS hmac

############# HELM STUFF

  - name: simplehelmChart
    type: HelmChart
    configuration:
      sourceArtifactory: johns_art
      repository: simplecharts/
      chart: simplehelm
      version: 0.0.0

  - name: simplehelmRepo_chart
    type: GitRepo
    configuration:
      gitProvider: tr_github
      path: trriplejay/simplehelm
      branches:
        include: ^windows$
      files:
        include: "simplehelm.*"

  - name: simplehelmRepo_docker
    type: GitRepo
    configuration:
      gitProvider: tr_github
      path: trriplejay/simplehelm
      branches:
        include: ^windows$
      files:
        include: "Dockerfile|server.js|package.json"

  - name: simplehelmDockerImage
    type: Image
    configuration:
      registry: johns_docker
      imageName: trriplejay/simplehelm
      imageTag: latest

############# END HELM STUFF



pipelines:
############ baseline demo
  - name: baseline
    configuration:
      environmentVariables:
        readOnly:
          hello: "world"
    steps:
      - name: story_1_to_6
        type: PowerShell
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: dotnetcore
                versions:
                  - 3.1
          environmentVariables:
            foo: "bar"
          integrations:
            - name: johns_ssh
            - name: johns_art
            - name: johns_gcloud
            - name: johns_kube
            - name: aidan_aws
            - name: johns_docker
            - name: aidan_slack
            - name: aidan_email
            - name: aidan_jira
            - name: johns_azure
          inputResources:
            - name: myRepo
              trigger: false
            - name: myFileSpec
            - name: myBaseImage
            - name: myVmCluster
        execution:
          onStart:
            - try { send_notification aidan_slack } catch {$_}
          onExecute:
            - dotnet --version
            - try { write-output "foo is $foo"; $foo = "asdf"} catch {$_} finally {write-output "foo is $foo"}
            - try { write-output "hello is $hello"; $hello = "asdf"} catch {$_} finally {write-output "hello is $hello"}
            - try { send_notification aidan_jira -project-id "PIP" } catch {$_}
            - Get-Variable | format-table
          onComplete:
            - try { send_notification aidan_email -recipients "john@shippable.com"} catch {$_}
            - try { send_notification aidan_slack } catch {$_}

############ HOOKS
  - name: outgoing_hook
    steps:
      - name: send_it
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
          outputResources:
            - name: myOutgoingHook
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table
#             - set_payload -name myOutgoingHook -payload "{`"hello`":`"World`"}"
            - $payloadFile = "test.json"
            - New-Item -Path "test.json"  -Force -ItemType File
            - '[IO.File]::WriteAllLines(("test.json" | Resolve-Path), "{`"hello`":`"World`"}")'
            - set_payload -name myOutgoingHook -payload test.json -file

      - name: send_it_hmac
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
          outputResources:
            - name: myOutgoingHook_hmac
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table
            - set_payload -name myOutgoingHook_hmac -payload "{`"hello`":`"World`"}"

      - name: send_it_auth
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
          outputResources:
            - name: myOutgoingHook_auth
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table
            - set_payload -name myOutgoingHook_auth -payload "{`"hello`":`"World`"}"

  - name: incoming_hook
    steps:
      - name: get_it
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
            - name: myIncomingHook
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table

      - name: get_it_hmac
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
            - name: myIncomingHook_hmac
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table

      - name: get_it_auth
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
            - name: myIncomingHook_auth
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table


########### END HOOKS


############ resources/integrations
  - name: win_one_little_step
    configuration:
      environmentVariables:
        readOnly:
          pipeline_readonly_env: "you can't change me!"
        pipeline_writable_env: "I'm subject to change"
    steps:
      - name: test_envs
        type: PowerShell
        configuration:
          environmentVariables:
            step_writable_env: "I'm subject to change"
          inputResources:
            - name: myImage
            - name: myRepo
              trigger: false
            - name: myBuildInfo
            - name: myFileSpec
          integrations:
            - name: johns_generic_envs
            - name: johns_art
            - name: johns_kube
            - name: johns_gcloud
        execution:
          onStart:
            - write-output "image resource path is $res_myImage_resourcePath"
            - write-output "current section. is it $current_script_section or $global:current_script_section"
          onExecute:
            - write-output "current section. is it $current_script_section or $global:current_script_section"
            - write-output "lets take a look at the whole ENV.. its faster..."
            - try { $pipeline_readonly_env = "haha i changed you" } catch {$_}
            - try { $global:pipeline_readonly_env = "haha i changed you" } catch {$_}
            - try { $pipeline_writeable_env = "haha i changed you" } catch {$_}
            - try { $step_writeable_env = "haha i changed you" } catch {$_}
            - get-variable
            - get-variable | format-table -property name, value, options
            - try { $global:pipeline_writeable_env = "haha i changed you" } catch {$_}
            - write-output "$global:pipeline_writeable_env"
            - write-output "$pipeline_writeable_env"
            - write-output "$global:pipeline_readonly_env"
            - write-output "$pipeline_readonly_env"
            - get-variable -name pipeline_readonly_env
            - get-variable -name pipeline_readonly_env -scope global
            - get-variable -name pipeline_writeable_env
            - get-variable -name pipeline_writeable_env -scope global
            - get-variable -name KUBECONFIG
            - get-content "$KUBECONFIG"
            - get-childitem "$step_workspace_dir/johns_kube"
          onSuccess:
            - write-output "current section. is it $current_script_section or $global:current_script_section"
            - write-output "try to change a readonly variable"

          onFailure:
            - write-output "current section. is it $current_script_section or $global:current_script_section"
          onComplete:
            - write-output "current section. is it $current_script_section or $global:current_script_section"
############ END resources/integrations



############ flow control
  - name: windows_basic_pipe
    steps:
      - name: full_success
        type: PowerShell
        configuration:
          nodePool: win-static
          affinityGroup: winffinity
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onExecute
        type: PowerShell
        configuration:
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
            - bad stuff
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onStart
        type: PowerShell
        configuration:
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
            - bad stuff
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onFailure
        type: PowerShell
        configuration:
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
            - bad stuff
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
            - bad stuff
          onComplete:
            - write-output "mission complete"

      - name: fail_onSuccess
        type: PowerShell
        configuration:
          affinityGroup: winffinity
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
            - bad stuff
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onComplete
        type: PowerShell
        configuration:
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"
            - bad stuff

      - name: fail_onExecute_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
            - bad stuff
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onStart_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
            - bad stuff
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onFailure_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
            - bad stuff
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
            - bad stuff
          onComplete:
            - write-output "mission complete"

      - name: fail_onSuccess_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          affinityGroup: winffinity
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
            - bad stuff
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onComplete_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"
            - bad stuff

########### END flow control


########### header util testing
  - name: test_header_funcs
    steps:
      - name: add_files
        type: PowerShell
        configuration:
          inputResources:
            - name: myRepo
              trigger: false
        execution:
          onExecute:
            - try { add_run_files } catch {$_} # no arguments
            - try { add_run_files "blah" } catch {$_} # one argument
            - try { add_run_files -sources a,b,c } catch {$_} # missing name
            - try { add_run_files -sources "test" -name "hello world"} catch {$_} #space not allowed
            - try { add_pipeline_files } catch {$_} # no arguments
            - try { add_pipeline_files "blah" } catch {$_} # one argument
            - try { add_pipeline_files -sources a,b,c } catch {$_} # missing name
            - try { add_pipeline_files -sources "test" -name "hello world"} catch {$_} #space not allowed
            - try { add_cache_files } catch {$_} # no arguments
            - try { add_cache_files "blah" } catch {$_} # one argument
            - try { add_cache_files -sources a,b,c } catch {$_} # missing name
            - try { add_cache_files -sources "test" -name "hello world"} catch {$_} #space not allowed
            - get-childitem $run_dir\workspace
            - get-childitem $res_myRepo_resourcePath
            # runs
            - add_run_files -sources "$res_myRepo_resourcePath" -name myRepo
            - add_run_files -sources "$res_myRepo_resourcePath\bas*" -name myDirs
            - add_run_files -sources "$res_myRepo_resourcePath\file*" -name myFiles
            - add_run_files -sources "$res_myRepo_resourcePath\file1.txt", "$res_myRepo_resourcePath\base" -name myMixed
            - get-childitem $run_dir\workspace
            - get-childitem $run_dir\workspace\myRepo
            - get-childitem $run_dir\workspace\myDirs
            - get-childitem $run_dir\workspace\myFiles
            - get-childitem $run_dir\workspace\myMixed
            #pipelines
            - get-childitem $pipeline_workspace_dir
            - add_pipeline_files -sources "$res_myRepo_resourcePath" -name myRepo
            - add_pipeline_files -sources "$res_myRepo_resourcePath\bas*" -name myDirs
            - add_pipeline_files -sources "$res_myRepo_resourcePath\file*" -name myFiles
            - add_pipeline_files -sources "$res_myRepo_resourcePath\file1.txt", "$res_myRepo_resourcePath\base" -name myMixed
            - get-childitem $pipeline_workspace_dir
            - get-childitem $pipeline_workspace_dir\myRepo
            - get-childitem $pipeline_workspace_dir\myDirs
            - get-childitem $pipeline_workspace_dir\myFiles
            - get-childitem $pipeline_workspace_dir\myMixed
            #cache
            - try { get-childitem $step_workspace_dir\download\cache } catch {$_}
            - try {restore_cache_files -name myCount -path "."} catch {$_}
            - ls
            - try {cat myCount} catch {$_}
            - try {restore_cache_files -name myRepo -path "$step_tmp_dir"} catch {$_}
            - ls $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - try {restore_cache_files -name myDirs -path "$step_tmp_dir"} catch {$_}
            - ls $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - try {restore_cache_files -name myFiles -path "$step_tmp_dir"} catch {$_}
            - ls $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - try {restore_cache_files -name myMixed -path "$step_tmp_dir"} catch {$_}
            - ls $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*

            - if (!(test-path "sum.txt")) {Set-Content -Path "sum.txt" -Value "{`"count`":1}"}
            - if (test-path "sum.txt") {$contents = get-content sum.txt | ConvertFrom-Json ; $contents.count +=1; $contents | convertTo-Json | set-content -Path "sum.txt" }
            - try {$count = (Get-Content sum.txt | ConvertFrom-Json).count ; write-output "count is -- $count"} catch {$_}
            - try {add_cache_files -sources sum.txt -name myCount} catch {$_}
            - add_cache_files -sources "$res_myRepo_resourcePath" -name myRepo
            - add_cache_files -sources "$res_myRepo_resourcePath\bas*" -name myDirs
            - add_cache_files -sources "$res_myRepo_resourcePath\file*" -name myFiles
            - add_cache_files -sources "$res_myRepo_resourcePath\file1.txt", "$res_myRepo_resourcePath\base" -name myMixed
            - try { get-childitem $step_workspace_dir\download\cache } catch {$_}
            - try { get-childitem $step_workspace_dir\download\cache\myRepo } catch {$_}
            - try { get-childitem $step_workspace_dir\download\cache\myDirs } catch {$_}
            - try { get-childitem $step_workspace_dir\download\cache\myFiles } catch {$_}
            - try { get-childitem $step_workspace_dir\download\cache\myMixed } catch {$_}
            - add_run_variables "testvariable=asdffdjksfjk"
            - try {save_tests -sources "$res_myRepo_resourcePath\tests\sampleoutput.xml"} catch {$_}
            - New-Item -Path ".\faketests" -ItemType Directory
            - try {save_tests -sources faketests} catch {$_}



      - name: restore_files
        type: PowerShell
        configuration:
          inputResources:
            - name: myRepo
              trigger: false
          inputSteps:
            - name: add_files
        execution:
          onExecute:
            - $testvariable
            - get-childitem $run_dir\workspace
            #runs
            - restore_run_files -name myRepo -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_run_files -name myDirs -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_run_files -name myFiles -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_run_files -name myMixed -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            #pipelines
            - get-childitem $step_tmp_dir
            - get-childitem $pipeline_workspace_dir
            - restore_pipeline_files -name myRepo -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_pipeline_files -name myDirs -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_pipeline_files -name myFiles -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_pipeline_files -name myMixed -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
########### END header util testing

  - name: win_scratch
    steps:
      - name: win_scratch_step
        type: PowerShell
        execution:
          onExecute:
            - 'get-childitem env:'
            - get-variable | format-table
            - write-output "path is $env:Path"
            - write-output "docker dir is $env:DOCKER_DIR"
            - New-Item -ItemType File -Value "hello world" -Path "c:\test\my\file\path\length\by\using\lots\of\characters\itneeds\tobehigher\than\twohundred\andsixty\inorder\torequire\theenablement\oflongfile\paths\thoughdoingso\onthehost\doesnotseem\tomatter\wowthis\seemssolong\yetimbarelyover\twohundred\atthispoint\icanseewhy\intheearlydays\windowsdevsmay\havethoughtthat\longerwasunreasonable\butjeez\thisis\twentytwenty\getwith\thetimes\please"


############### native steps  #####################

#--------- docker build/push
  - name: docker_native
    steps:
      - name: build
        type: DockerBuild
        configuration:
          affinityGroup: buildAndPush
          integrations:
            - name: johns_art
          inputResources:
            - name: myRepo
              trigger: false
          dockerFileLocation: ./base
          dockerFileName: Dockerfile
          dockerImageName: 35.238.69.200:8082/buildimages/w19base
          dockerImageTag: ${run_number}
        execution:
          onStart:
            - ls "$env:TEMP"
          onComplete:
            - ls "$env:TEMP"
            - ls "$env:TEMP\jfrog"

      - name: push
        type: DockerPush
        configuration:
          affinityGroup: buildAndPush
          inputSteps:
            - name: build
          integrations:
            - name: johns_art
          outputResources:
            - name: myBuildInfo
            - name: myBaseImage
          targetRepository: buildimages
          autoPublishBuildInfo: true
          # forceXrayScan: true
          # failOnScan: true
        execution:
          onStart:
            - choco install -y jfrog-cli --version=1.34.0
          onComplete:
            # - write-output "try the push manually using just "try the push manually using just docker"
            # - docker login 35.238.69.200:8082 -u ${int_johns_art_user} -p ${int_johns_art_apikey}
            # - docker push "${build_dockerImageName}:${build_dockerImageTag}"
            - ls "$env:TEMP"
            - ls "$env:TEMP\jfrog"

#--------------- Helm publish/deploy
  - name: helm_native
    steps:
      - name: dockerBuildPushP
        type: PowerShell
        configuration:
          integrations:
            - name: tr_docker
          inputResources:
            - name: simplehelmRepo_docker
          outputResources:
            - name: simplehelmDockerImage
        execution:
          onExecute:
            - Push-Location $res_simplehelmRepo_docker_resourcePath
            - docker build -t trriplejay/simplehelm:$run_number .
            - docker push trriplejay/simplehelm:$run_number
            - write_output simplehelmDockerImage "imageTag=$run_number"

      - name: publish_helm_chart
        type: HelmPublish
        configuration:
          inputResources:
            - name: simplehelmRepo_chart
          outputResources:
            - name: simplehelmChart
          chartPath: ./simplehelm

      - name: deploy_helm_chart
        type: HelmDeploy
        configuration:
          integrations:
            - name: johns_kube
          inputResources:
            - name: simplehelmChart
            - name: simplehelmDockerImage
          releaseName: simplehelm
          flags: "--namespace dev --atomic"
          dryRun: true
          test: true
          testFlags: "--cleanup --logs"
          lint: true
          # lintFlags: "--strict"
          valueFilePaths:
            - values.yaml
        execution:
          onStart:
            - get-variable | format-table
  - name: helm_repo
    steps:
      - name: deploy_helm_chart
        type: HelmDeploy
        configuration:
          integrations:
            - name: johns_kube
          inputResources:
            - name: simplehelmRepo_chart
          releaseName: simplehelm
          chartPath: "simplehelm"
          flags: "--namespace repo --atomic"
          dryRun: true
          test: true
          testFlags: "--cleanup --logs"
          lint: true
          # lintFlags: "--strict"
          valueFilePaths:
            - values.yaml
        execution:
          onStart:
            - get-variable | format-table


#--------- go build/publish
  - name: go_native
    steps:
      - name: build
        type: GoBuild
        configuration:
          integrations:
            - name: johns_art
          sourceLocation: .
          outputLocation: ${step_tmp_dir}/output
          outputFile: result
          repository: go_stuff
          inputResources:
            - name: go_app_repo
              trigger: false
        execution:
          onStart:
            - get-childitem $step_tmp_dir
          onComplete:
            - get-childitem $step_tmp_dir/output

      # - name: pubBin
      #   type: GoPublishBinary
      #   configuration:
      #     inputSteps:
      #       - name: build
      # - name: pubMod
      #   type: GoPublishModule
      #   configuration:
      #     inputSteps:
      #       - name: build
  - name: dummy_bash
    steps:
      - name: dummy_bash
        type: Bash
        execution:
          onExecute:
            - echo "dummy"
